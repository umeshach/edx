set.seed(2);shapiro.test(rnorm(5000))$p.value
set.seed(3);shapiro.test(rnorm(5000))$p.value
set.seed(3);x <- rnorm(5000)
summary(rnorm)
set.seed(3);x <- rnorm(5000)
summary(x)
set.seed(3);x <- rnorm(5000)
summary(x)
shapiro.test(x)$p.value
set.seed(3);x <- rnorm(5000)
summary(x)
shapiro.test(x)$p.value
x[5000]
set.seed(3);x <- rnorm(5000)
summary(x)
shapiro.test(x)$p.value
x[5000] <- 6.0
shapiro.test(x)$p.value
set.seed(3);x <- rnorm(5000)
summary(x)
shapiro.test(x)$p.value
x[5000] <- -5.0
shapiro.test(x)$p.value
set.seed(3);x <- rnorm(5000)
summary(x)
shapiro.test(x)$p.value
x[5000] <- -5.0
shapiro.test(x)$p.value
set.seed(3);x <- rnorm(5000)
summary(x)
shapiro.test(x)$p.value
x[5000] <- -6.0
shapiro.test(x)$p.value
set.seed(3);x <- rnorm(5000)
summary(x)
shapiro.test(x)$p.value
x[5000] <- -5.50
shapiro.test(x)$p.value
set.seed(3);x <- rnorm(5000)
summary(x)
shapiro.test(x)$p.value
x[5000] <- -5.50
shapiro.test(x)$p.value
set.seed(3);x <- rnorm(5000);summary(x)
shapiro.test(x)$p.value
x[5000] <- -5.50;summary(x)
shapiro.test(x)$p.value
set.seed(3);x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -5.50;summary(x)
shapiro.test(x)$p.value
set.seed(3);x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[100] <- -5.50;summary(x)
shapiro.test(x)$p.value
set.seed(3);x <- rnorm(100);summary(x)
shapiro.test(x)$p.value
x[100] <- -5.50;summary(x)
shapiro.test(x)$p.value
set.seed(3);x <- rnorm(100);summary(x)
shapiro.test(x)$p.value
x[100] <- -4.67;summary(x)
shapiro.test(x)$p.value
set.seed(3);x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -4.67;summary(x)
shapiro.test(x)$p.value
set.seed(3);x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -4.67;summary(x)
shapiro.test(x)$p.value
set.seed(3);x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -4.67;summary(x)
shapiro.test(x)$p.value
set.seed(3);x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -4.9;summary(x)
shapiro.test(x)$p.value
set.seed(3);x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -4.99;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -4.99;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -4.99;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -4.99;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -4.99;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -4.99;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -4.99;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -4.99;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -4.99;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -4.99;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -4.99;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -4.99;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -4.99;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000);summary(x)
shapiro.test(x)$p.value
x[1000] <- -4.99;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000)#;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000)#;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000)#;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000)#;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000)#;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000)#;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000)#;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000)#;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000)#;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000)#;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000)#;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000)#;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000)#;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000)#;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000)#;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000)#;summary(x)
shapiro.test(x)$p.value
x <- rnorm(1000)#;summary(x)
shapiro.test(x)$p.value
?pnorm
pnorm(83,74,4)
?runif
?rnorm
set.seed(13);mean(runif(1000,2,8))
?rand
??rand
?Random
set.seed(13);mean(rnorm(1000,2,8))
set.seed(13);mean(rnorm(1000,5,1))
?hist
hist(runif(1000,2,8))
hist(runif(1000,2,8),freq=density)
hist(runif(1000,2,8),density=T)
hist(runif(1000,2,8))
hist(runif(1000,2,8),breaks=100)
hist(runif(1000,2,8),breaks=100)
set.seed(13);hist(runif(1000,2,8),breaks=100)
set.seed(13);hist(runif(1000,2,8),breaks=100)
set.seed(13);hist(runif(1000,2,8),breaks=100)
set.seed(13);hist(runif(1000,2,8),breaks=100)
set.seed(13);hist(runif(1000,2,8),breaks=1000)
set.seed(13);hist(runif(1000,2,8),breaks=10)
set.seed(13);hist(runif(1000,2,8))
set.seed(13);hist(runif(1000,2,8),col=red)
set.seed(13);hist(runif(1000,2,8),col="red")
set.seed(13);hist(runif(1000,2,8),col="yellow")
set.seed(13);hist(runif(1000,2,8),col="green")
set.seed(13);hist(runif(1000,2,8),col="yellowgreen")
set.seed(13);hist(runif(1000,2,8),col="gold")
set.seed(13);hist(runif(1000,2,8),col="green")
set.seed(13);hist(rnorm(1000),col="green")
set.seed(13);hist(rnorm(1000),col="green",density=T)
set.seed(13);hist(rnorm(1000),col="green")
set.seed(13);hist(rnorm(1000),col="green",freq=T)
set.seed(13);hist(rnorm(1000),col="green",freq=f)
set.seed(13);hist(rnorm(1000),col="green",freq=F)
set.seed(13);hist(rnorm(1000),col="green",freq=T)
set.seed(13);hist(rnorm(1000),col="green",freq=F)
set.seed(13);hist(rnorm(1000),col="green",freq=T)
set.seed(13);hist(density(rnorm(1000)),col="green")
set.seed(13);hist(density(rnorm(1000)))
set.seed(13);plot(density(rnorm(1000)))
set.seed(13);plot(density(rnorm(1000)),col="red")
set.seed(13);polygon(density(rnorm(1000)),col="red")
set.seed(13);polygon(density(rnorm(10000)),col="red")
set.seed(13);polygon(density(rnorm(100000000)),col="red")
set.seed(13);polygon(density(rnorm(1000)),col="red")
set.seed(13);boxplo(density(rnorm(1000)),col="red")
set.seed(13);boxplot(rnorm(1000),col="red")
set.seed(13);boxplot(rnorm(1000),col="red");summary(rnorm(1000))
set.seed(13);boxplot(rnorm(1000),runif(1000),col="red");summary(rnorm(1000),runif(1000))
set.seed(13);boxplot(rnorm(1000),runif(1000),col="red");summary(cbind(rnorm(1000),runif(1000)))
set.seed(13);boxplot(rnorm(1000),runif(1000,-1,1),col="red");summary(cbind(rnorm(1000),runif(1000,-1,1)))
r <- c(1:10)
r <- data.frame(a=1:10)
View(r)
edit(r)
r
r2 <- edit(r)
r2
?data
data()
data(package = .packages(all.available = TRUE)
)
data[[]]
data{}
data()
data(housing)
library(A3)
x <- housing
x <- data(housing)
read.table(file.choose(),header=T)
xyz <- read.table(file.choose(),header=T)
head(xyz)
?read.csv
xyz <- read.csv(file.choose(),header=T)
head(xyz)
summary(xyz)
boxplot(xyz)
boxplot(xyz,col="heat")
?color
??color
demo(lm)
demo()
demo(package = .packages(all.available = TRUE)
)
data(cars)
head(cars)
carcar <- data(cars)
head(carcar)
rm(list=ls())
a <- data.frame(v1=c(1:10),v2=c(10:1))
a
attach(a)
v1
v2
b <- data.frame(v1=c(11:20),v2=c(20:11))
attach(b)
v1
v2
detach(b)
v2
v1
plot(a)
?plot
plot(a,type="l")
install.packages("slidify")
install.packages("hflights")
library(hflights)
library(slidify)
install.packages(slidify)
install.packages("slidify")
install.packages("slidify")
install.packages("slidify")
.1+.2
a
b
v1
??package
??installed
?installed.packages
installed.packages
installed.packages()
packages <- installed.packages()
packages <- data.frame(installed.packages())
View(packages)
"SDSFoundations" %in% installed.packages()$Packages
"SDSFoundations" %in% installed.packages()$Package
installed.packages()$Package
data.frame(installed.packages())$Package
"bitops" %in% data.frame(installed.packages())$Package
str(installed.packages())
installed.packages[[2]]
installed.packages[[1]]
installed.packages()[[2]]
installed.packages()[[]]
installed.packages()[[1]]
installed.packages()[1]
installed.packages()[2]
installed.packages()
head(installed.packages())
str(head(installed.packages()))
head(installed.packages()[,1])
"SBSFoundations" %in% installed.packages()[,1]
?Sys.info
Sys.info
Sys.info()
Sys.info()$nodename
str(Sys.info())
Sys.info()[row.name=="nodename"]
Sys.info()[rowname=="nodename"]
Sys.info()[rownames=="nodename"]
data.frame(Sys.info())
setwd("~/edX/Foundations of Data Analysis [University of Texas-Austin]/Week 02 - Univariate Descriptive Statistics")
?download.file
# Install (if necessary) and load SBSFoundations library
if ("SBSFoundations" %in% installed.packages()[,1]==F) {
install.packages("SBSFoundations")
}
library("SBSFoundations")
# Set working directory
if (Sys.info()[4]=="SSAI-0102-HP") {
setwd("~/edX/Foundations of Data Analysis [University of Texas-Austin]/Week 02 - Univariate Descriptive Statistics")
} else {
print("... manually set your working directory ...")
}
# Download AnimalData file
if (file.exists("./data/AnimalData.csv")==F) {
url <- "https://courses.edx.org/c4x/UTAustinX/UT.7.01x/asset/AnimalData.csv"
download.file(url,filedest="./data/AnimalData.csv")
}
if (file.exists("./data/AnimalData.csv")==F) {
url <- "https://courses.edx.org/c4x/UTAustinX/UT.7.01x/asset/AnimalData.csv"
download.file(url,destfile="./data/AnimalData.csv")
}
AnimalData <- read.csv("./data/AnimalData.csv")
View(AnimalData)
View(AnimalData)
subset(AnimalData[1:10,],Outcome.Type=="Adoption")
nrow(subset(AnimalData[1:10,],Outcome.Type=="Adoption"))
ncol(AnimalData)
subset(AnimalData,OUtcome.Type=="Return to Owner")[1]
subset(AnimalData,OUtcome.Type=="Return to Owner")[1,]
subset(AnimalData,Outcome.Type=="Return to Owner")[1,]
subset(AnimalData,Outcome.Type=="Return to Owner")[1,]$Neutered.Status==T
subset(AnimalData,Outcome.Type=="Return to Owner")[1,]$Neutered.Status=="Neutered"
subset(AnimalData,Intake.Type=="Owner Surrender")[1,]$Neutered.Status=="Neutered"
subset(AnimalData,Intake.Type=="Owner Surrender")
subset(AnimalData,Intake.Type=="Owner Surrender")[1,]
animaldata <- read.csv("./data/AnimalData.csv")
# How many variables are in this dataset?
ncol(animaldata)
# How many of the first 10 animals in the dataset were adopted?
nrow(subset(animaldata[1:10,],Outcome.Type=="Adoption"))
# Was the first owner-surrendered animal in the dataset neutered?
subset(animaldata,Intake.Type=="Owner Surrender")[1,]$Neutered.Status=="Neutered"
table(animaldata$Outcome.Type)
hist(table(animaldata$Outcome.Type))
??chart
barplot(table(animaldata$Outcome.Type))
barplot(table(animaldata$Outcome.Type),horiz=T)
adopted <- animaldata[animaldata$Outcome.Type=="Adoption",]
daystoadopt <- adopted$Days.Shelter
hist(daystoadopt)
?fivenum
fivenum(daystoadopt)
summary(daystoadopt)
which(animaldata$Days.Shelter==max(daystoadopt))
animaldata[425,]
?which
which((1:12)%%2 == 0) # which are even?
animaldata[which(animaldata$Outcome.Type=="Adoption"),]
animaldata[which(animaldata$Outcome.Type=="Adoption"),][1,]
animaldata[which(animaldata$Outcome.Type=="Adoption")]
animaldata[which(animaldata$Outcome.Type=="Adoption"),][1,]
subset(animaldata,Intake.Type=="Owner Surrender")[1,]$Neutered.Status=="Neutered"
subset(animaldata[1:10,],Outcome.Type=="Adoption")
animaldata[which(animaldata$Outcome.Type[1:10,]=="Adoption"),]
animaldata[1:10,][which(animaldata$Outcome.Type=="Adoption"),]
subset(animaldata[1:10,],Outcome.Type=="Adoption")
animaldata[which(animaldata[1:10,]$Outcome.Type=="Adoption"),][1,]
animaldata[which(animaldata[1:10,]$Outcome.Type=="Adoption"),]
which(animaldata[1:10,]$Outcome.Type=="Adoption")
which(animaldata$Days.Shelter==max(daystoadopt))
which(animaldata$Days.Shelter==max(daystoadopt))
hist(daystoadopt)
summary(daystoadopt)
str(summary(daystoadopt))
summary(daystoadopt)[5]-summary(daystoadopt)[2]
??quartile
IQR(daystoadopt)
head(daystoadopt)
head(daystoadopt[daystoadopt<max(daystoadopt)])
IQR(daystoadopt[daystoadopt<max(daystoadopt)])
fivenum()
fivenum(daystoadopt)
fivenum(daystoadopt)[5]-fivenum(daystoadopt)[2]
str(fivenum(daystoadopt))
fivenum(daystoadopt)[1]
fivenum(daystoadopt)[2]
fivenum(daystoadopt)[3]
fivenum(daystoadopt)[5]
fivenum(daystoadopt)[4]-fivenum(daystoadopt)[2]
summary(daystoadopt)[5]-summary(daystoadopt)[2]
?z
??z
scale(daystoadopt)
which(animaldata$Days.Shelter==max(daystoadopt))
max(daystoadopt)
which(animaldata$Days.Shelter==max(daystoadopt))
scale(daystoadopt)[which(animaldata$Days.Shelter==max(daystoadopt))]
scale(animaldata$Days.Shelter)[which(animaldata$Days.Shelter==max(daystoadopt))]
scale(daystoadopt)[which(daystoadopt==max(daystoadopt))]
summary(daystoadopt)
View(animaldata)
table(animaldata$Animal.Type)
table(animaldata$Animal.Type[animaldata$Age.Intake>0])
hist(animaldata$Weight[animaldata$Age.Intake>0])
hist(animaldata$Weight[animaldata$Age.Intake>0 & animaldata$Animal.Type =="Dog"])
hist(animaldata$Weight[animaldata$Age.Intake>0 & animaldata$Animal.Type =="CAt"])
hist(animaldata$Weight[animaldata$Age.Intake>0 & animaldata$Animal.Type =="Cat"])
summary(animaldata$Weight[animaldata$Age.Intake>0 & animaldata$Animal.Type =="Cat"])
summary(animaldata$Weight[animaldata$Age.Intake>0 & animaldata$Animal.Type =="Dog"])
sd(animaldata$Weight[animaldata$Age.Intake>0 & animaldata$Animal.Type =="Dog"])
sd(animaldata$Weight[animaldata$Age.Intake>0 & animaldata$Animal.Type =="Cat"])
catweight <- animaldata$Weight[animaldata$Age.Intake>0 & animaldata$Animal.Type =="Cat"]
summary(catweight)
which(catweight>13)
catweight[which(catweight>13)]
(13-mean(catweight))/sd(catweight)
1-pnorm((13-mean(catweight))/sd(catweight))
length(catweight[which(catweight>13)])/length(catweight)
summary(animaldata$Weight[animaldata$Age.Intake>0 & animaldata$Animal.Type =="Dog"])
mean(catweight)
summary(catweight)
table(animaldata$Intake.Type)
table(animaldata$Intake.Type)[2]/sum(animaldata$Intake.Type)
table(animaldata$Intake.Type)[2]/sum(as.integer(animaldata$Intake.Type))
table(animaldata$Intake.Type)[2]
sum(as.integer(animaldata$Intake.Type))
str(as.integer(animaldata$Intake.Type))
# What proportion of dogs were brought to the shelter as an owner surrender? (Round to 3 decimal places.)
table(animaldata$Intake.Type)[2]/nrow(animaldata)
nrow(subset(animaldata,Intake.Type=="Ower Surrender"))
nrow(subset(animaldata,Intake.Type=="Owner Surrender"))
nrow(subset(animaldata,Intake.Type=="Owner Surrender" & Outcome.Type =="Return to Owner"))
mean(subset(animaldata,Intake.Type=="Owner Surrender" & Outcome.Type =="Return to Owner"))
nrow(subset(animaldata$Shelter.Days,Intake.Type=="Owner Surrender" & Outcome.Type =="Return to Owner"))
mean(subset(animaldata,Intake.Type=="Owner Surrender" & Outcome.Type =="Return to Owner")$Shelter.Days)
mean(subset(animaldata,Intake.Type=="Owner Surrender" & Outcome.Type =="Return to Owner")$Shelter.Day)
mean(subset(animaldata,Intake.Type=="Owner Surrender" & Outcome.Type =="Return to Owner")$Days.Shelter)
surrender <- subset(animaldata$Shelter.Days,Intake.Type=="Owner Surrender")
surrender <- subset(animaldata,Intake.Type=="Owner Surrender")
which(surrender$Outcome.Type=="Return to Owner")
nrow(subset(animaldata,Animal.Type=="Dog" & Intake.Type=="Owner Surrender" & Outcome.Type =="Return to Owner"))
mean(subset(animaldata,Animal.Type=="Dog" & Intake.Type=="Owner Surrender" & Outcome.Type =="Return to Owner")$Days.Shelter)
table(animaldata$Intake.Type[which(animaldata$Animal.Type=="Dog"),])[2]/nrow(subset(animaldata,Animal.Type=="Dog"))
table(animaldata$Intake.Type[which(animaldata$Animal.Type=="Dog"),])
which(animaldata$Animal.Type=="Dog")
table(animaldata$Intake.Type[which(animaldata$Animal.Type=="Dog")])[2]/nrow(subset(animaldata,Animal.Type=="Dog"))
80-2-2-3-6-7-9-10-15-18
summary(1:10)
1:10
5.5/2-1
5.5-1
/2
(5.5-1)/2
summary(1:5)
summary(1:5.5)
summary(1:10)
2+2+3+4+6+7+9+14+15+18
6.7-(1.1*1.5)
1-pnorm((4.5-6.7)/1.1)
pnorm((8.79-6.7)/1.1)-pnorm((5.38-6.7)/1.1)
w <- c(10,   2,   6,   12,   14,   15,   15,   24,   15,   25,   3,   12)
w
summary(w)
sd(w)
hist(w)
sort(w)
summary(sort(w))
fivenum(sort(w))
installed.packages("SBSFoundations")
if ("SBSFoundations" %in% installed.packages()[,1]==F) {
install.packages("SBSFoundations")
}
library("SBSFoundations")
if ("SDSFoundations" %in% installed.packages()[,1]==F) {
install.packages("SDSFoundations")
}
library("SDSFoundations")
# Install (if necessary) and load SBSFoundations library
if ("SDSFoundations" %in% installed.packages()[,1]==F) {
install.packages("SDSFoundations",repos=NULL)
}
library("SDSFoundations")
# Install (if necessary) and load SBSFoundations library
if ("SDSFoundations" %in% installed.packages()[,1]==F) {
install.packages("SDSFoundations_1.1.zip",repos=NULL)
}
library("SDSFoundations")
?lowess
